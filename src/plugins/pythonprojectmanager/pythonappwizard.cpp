#include "pythonappwizard.h"

#include <coreplugin/coreconstants.h>
#include <projectexplorer/customwizard/customwizard.h>
#include <qtsupport/qtsupportconstants.h>

#include <QtGui/QIcon>

#include <QtGui/QPainter>
#include <QtGui/QPixmap>

#include <QtCore/QDir>
#include <QtCore/QTextStream>
#include <QtCore/QCoreApplication>

namespace {
    const char * const PYTHON_WIZARD_TR_SCOPE = "PythonProjectManager";
    const char * const PYTHON_WIZARD_TR_CATEGORY =
                QT_TRANSLATE_NOOP("PythonProjectManager", "Python Project");
    const char * const PYTHON_WIZARD_CATEGORY = "Python.Projects";
}

namespace PythonProjectManager {
namespace Internal {

PythonAppWizardDialog::PythonAppWizardDialog(QWidget *parent) :
    ProjectExplorer::BaseProjectWizardDialog(parent)
{
    setWindowTitle(tr("New Python Project"));
    setIntroDescription(tr("This wizard generates a Python project."));
}

PythonAppWizard::PythonAppWizard()
    : Core::BaseFileWizard(parameters())
{
}

PythonAppWizard::~PythonAppWizard()
{
}

Core::BaseFileWizardParameters PythonAppWizard::parameters(void)
{
    Core::BaseFileWizardParameters parameters(ProjectWizard);
    parameters.setIcon(QIcon(QLatin1String(":/images/python.png")));
    parameters.setDisplayName(tr("Python Application"));
    parameters.setId(QLatin1String("QB.Python Application"));

    parameters.setDescription(tr("Creates a Python application with a "
                "stub implementation."));
    parameters.setCategory(QLatin1String(PYTHON_WIZARD_CATEGORY));
    parameters.setDisplayCategory(QCoreApplication::translate(
                                    PYTHON_WIZARD_TR_SCOPE,
                                    PYTHON_WIZARD_TR_CATEGORY));
    return parameters;
}

QWizard *
PythonAppWizard::createWizardDialog(QWidget *parent,
                                    const QString &defaultPath,
                                    const WizardPageList &extensionPages) const
{
    PythonAppWizardDialog *wizard = new PythonAppWizardDialog(parent);

    wizard->setPath(defaultPath);
    wizard->setProjectName(PythonAppWizardDialog::uniqueProjectName(defaultPath));

    foreach (QWizardPage *p, extensionPages)
        BaseFileWizard::applyExtensionPageShortTitle(wizard, wizard->addPage(p));

    return wizard;
}

Core::GeneratedFiles
PythonAppWizard::generateFiles(const QWizard *w, QString *errorMessage) const
{
    Q_UNUSED(errorMessage)

    const PythonAppWizardDialog *wizard =
            qobject_cast<const PythonAppWizardDialog *>(w);
    const QString projectName = wizard->projectName();
    const QString projectPath = wizard->path() + QLatin1Char('/') + projectName;

    const QString setupFileName =
        Core::BaseFileWizard::buildFileName(projectPath, projectName,
                                            QLatin1String("setup"));
    const QString mainFileName =
        Core::BaseFileWizard::buildFileName(projectPath, projectName,
                                            QLatin1String("main"));

    const QString s = QDir(projectPath).relativeFilePath(mainFileName);

    QString projectContents;
    {
        QTextStream out(&projectContents);

        out << "\'\'\' File generated by Qt Creator, version "
            << Core::Constants::IDE_VERSION_LONG << "\'\'\'" << endl
            << endl
            << "from distutils.core import setup" << endl
            << endl
            << "setup(name=\'" << s << "\'" << endl
            << "      version=\'1.0\',"
            << "      py_modules[\'" << s << endl
            << "     )" << endl;
    }

    Core::GeneratedFile generatedSetupFile(setupFileName);
    generatedSetupFile.setContents(projectContents);
    generatedSetupFile.setAttributes(Core::GeneratedFile::OpenEditorAttribute);

    QString contents;
    {
        QTextStream out(&contents);

        out
            << "# -*- coding: utf-8 -*-" << endl
            << endl
            << "def main():" << endl
            << "    " << endl
            << endl
            << "if __init__ == \"__main__\":" << endl
            << "   main()" << endl;
    }

    Core::GeneratedFile generatedMainFile(mainFileName);
    generatedMainFile.setContents(contents);
    generatedMainFile.setAttributes(
                        Core::GeneratedFile::OpenProjectAttribute);

    Core::GeneratedFiles files;
    files.append(generatedSetupFile);
    files.append(generatedMainFile);

    return files;
}

bool PythonAppWizard::postGenerateFiles(const QWizard *,
                                const Core::GeneratedFiles &l,
                                QString *errorMessage)
{
    return ProjectExplorer::CustomProjectWizard::postGenerateOpen(l,
                                                                errorMessage);

}

}
}
